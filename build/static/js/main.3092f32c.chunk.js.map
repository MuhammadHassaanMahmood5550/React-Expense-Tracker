{"version":3,"sources":["components/Header.js","components/Transaction.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/TransactionList.js","components/AddTransaction.js","App.js","index.js"],"names":["Header","Transaction","transactions","sign","amount","DeleteTransaction","useContext","GlobalContext","className","text","Math","abs","onClick","id","state","action","type","filter","cur","payload","initialState","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","AddTransaction","transaction","Balance","total","map","reduce","previous","next","console","log","IncomeExpenses","amounts","income","pre","expense","TransactionList","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","round","random","htmlFor","placeholder","required","onChange","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3092f32c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div>\r\n            <h2>Expense Tracker</h2>   \r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nexport const Transaction = ({ transactions }) => {\r\n    const sign = transactions.amount < 0 ? \"-\" : \"+\";\r\n\r\n    const { DeleteTransaction } = useContext(GlobalContext);\r\n    return (\r\n        <div>\r\n             <li className={transactions.amount > 0 ? \"plus\" : \"minus\"}>\r\n           {transactions.text} <span>{`${sign}${Math.abs(transactions.amount)}`}</span><button onClick={() => DeleteTransaction(transactions.id)} className=\"delete-btn\">x</button>\r\n        </li>  \r\n        </div>\r\n    )\r\n}\r\n","import { Transaction } from \"../components/Transaction\";\r\n\r\nexport default (state, action) => {\r\n  switch(action.type) {\r\n    case \"DELETE_TRANSACTION\":\r\n      return{\r\n        //first return initial state with the help of spread operator = ...state\r\n        ...state,\r\n        transactions: state.transactions.filter((cur) => cur.id !== action.payload)\r\n      }\r\n      case \"Add_TRANSACTION\":\r\n        return{\r\n         ...state,\r\n         transactions: [action.payload ,...state.transactions]\r\n        }\r\n      default:\r\n          return state;\r\n  }\r\n}","/*each time we update data using useContext the other components use the useContext\r\nrerender */\r\n\r\n/*Basically reducers are there to manage state in an application. \r\nFor instance, if a user writes something in an HTML input field, the \r\napplication has to manage this UI state\r\nOR\r\nReducer to manage application state*/\r\n\r\n\r\n/*Context provides a way to pass data through the component tree without having to pass props down manually at every level.\r\nOR\r\nContext to pass data through component*/\r\n\r\n/*The Context API is a component structure provided by the React framework, which enables us to share specific forms of data across all levels of the application.*/\r\n\r\nimport React, { createContext, useReducer } from \"react\";\r\nimport AppReducer  from \"./AppReducer\";\r\n\r\n//initial state\r\nconst initialState = {\r\n    transactions: [\r\n        {id: 1, text: \"salary\", amount: 200},\r\n        {id: 2, text: \"car\", amount: -20},\r\n        {id: 3, text: \"fruit\", amount: -40},\r\n        {id: 4, text: \"food\", amount: 40}\r\n    ]\r\n}\r\n\r\n//create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//provider component\r\nexport const GlobalProvider = ({children}) => {  \r\n    //dispatch means remove\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    //Action\r\n    function DeleteTransaction(id){\r\n        dispatch({\r\n            type: \"DELETE_TRANSACTION\",\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    function AddTransaction(transaction){\r\n        dispatch({\r\n            type: \"Add_TRANSACTION\",\r\n            payload: transaction\r\n        });\r\n    }\r\n\r\n    return (<GlobalContext.Provider value={{\r\n        transactions: state.transactions,\r\n        DeleteTransaction,\r\n        AddTransaction\r\n        }}>\r\n        {children}\r\n    </GlobalContext.Provider>);\r\n}","import React, { useContext } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nexport const Balance = () => {\r\n    const {transactions} = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map((cur) => cur.amount);\r\n    const total = amounts.reduce((previous, next) => (previous + next), 0 );\r\n    console.log(total);\r\n    return (\r\n        <div>\r\n           <h4>Your Balance</h4>\r\n           <h1>{`${total}RS`}</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nexport const IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((cur) => cur.amount);\r\n\r\n  const income = amounts.filter((cur) => cur > 0).reduce((pre, next) => (pre + next),0);\r\n\r\n  const expense = amounts.filter((cur) => cur < 0).reduce((pre, next) => (pre + next),0);\r\n\r\n    return (\r\n            <div className=\"inc-exp-container\">\r\n        <div>\r\n          <h4>Income</h4>\r\n          <p className=\"money plus\">+{income}RS</p>\r\n        </div>\r\n        <div>\r\n          <h4>Expense</h4>\r\n          <p className=\"money minus\">-{Math.abs(expense)}RS</p>\r\n        </div>\r\n      </div> \r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport { Transaction } from './Transaction';\r\n\r\nexport const TransactionList = () => {\r\n\r\n  const { transactions } = useContext(GlobalContext);\r\n   \r\n    return (\r\n        <div>\r\n             <h3>History</h3>  \r\n             <ul  className=\"list\">   \r\n        {transactions.map((cur) => (\r\n          \r\n          <Transaction key={cur.id} transactions={cur}/>\r\n         \r\n        ))}\r\n        </ul>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useContext } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const { AddTransaction } = useContext(GlobalContext);\r\n\r\n  const onsubmit = (e) => {\r\n     e.preventDefault();\r\n\r\n     const newTransaction = {\r\n       id: Math.round(Math.random()*10000000),\r\n       text,\r\n       amount: +amount //in order to turn it into number\r\n     }\r\n\r\n     AddTransaction(newTransaction);\r\n  }\r\n\r\n    return (\r\n        <div>\r\n            <h3>Add new transaction</h3>\r\n      <form onSubmit={onsubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input type=\"text\"  placeholder=\"Enter text...\" \r\n          required\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\"\r\n            >Amount <br />\r\n            (negative - expense, positive - income)</label\r\n          >\r\n          <input type=\"number\" placeholder=\"Enter amount...\"\r\n          required\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)} />\r\n        </div>\r\n        <button className=\"bttn\">Add transaction</button>\r\n      </form>\r\n    </div> \r\n        \r\n    )\r\n}\r\n","\nimport {Header} from './components/Header';\nimport {Balance} from './components/Balance';\nimport { IncomeExpenses } from './components/IncomeExpenses';\nimport { TransactionList } from './components/TransactionList';\nimport { AddTransaction } from './components/AddTransaction';\n\nimport { GlobalProvider } from './context/GlobalState';\n\nimport './App.css';\nfunction App() {\n  return (\n  \n   <div className=\"App\">\n    \n       <GlobalProvider>\n       <div className=\"container\">\n  <Header/>\n  \n  <Balance/> \n  <IncomeExpenses></IncomeExpenses>\n  <TransactionList></TransactionList>\n  <AddTransaction></AddTransaction>\n\n    </div>\n    </GlobalProvider>\n    \n    </div>\n\n   \n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}